service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            - "arn:aws:sns:us-east-1:948204824271:createProductTopic"

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
  environment:
    SQS_URL:
      Ref: CatalogItemsQueue

functions:
  getProductsList:
    handler: handler.getProductsList
    environment:
      PRODUCTS_TABLE: "products"
      STOCKS_TABLE: "stockDataTable"
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
    environment:
      PRODUCTS_TABLE: "products"
      STOCKS_TABLE: "stockDataTable"
  createProduct:
    handler: handler.createProduct # Specify the handler for the new function
    environment:
      PRODUCTS_TABLE: "products"
    events:
      - http:
          path: products
          method: post # Configure the HTTP POST method for the new function
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    environment:
      PRODUCTS_TABLE: "products"
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn

# you can add CloudFormation resource templates here
resources:
  Resources:
    CatalogItemsQueue: # Define the SQS queue
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    CreateProductTopic: # Define the SNS topic
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Create Product Topic"
        TopicName: "createProductTopic"
    CreateProductEmailSubscription: # Define an email subscription for the SNS topic
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: "pachecoduke139@gmail.com"
        Protocol: "email"
        TopicArn:
          Ref: CreateProductTopic

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
